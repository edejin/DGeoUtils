/* eslint-disable max-lines,max-statements,max-lines-per-function */
import {DCircle, DPoint} from '../src';

describe('DCircle', () => {
  test('constructor', () => {
    const t = new DCircle(new DPoint(3, 5), 20);
    expect(t.r).toBe(20);
    expect(t.center.equal(new DPoint(3, 5))).toBe(true);
  });

  test('toString', () => {
    const t = new DCircle(new DPoint(3, 5), 20);
    expect(t.toString()).toBe('(3 5, 20)');
  });

  test('getValue', () => {
    const t = new DCircle(new DPoint(3, 5), 20);
    expect(t.getValue()).toEqual({
      center: new DPoint(3, 5),
      r: 20
    });
  });

  test('clone', () => {
    const t1 = new DCircle(new DPoint(3, 5), 20);
    const t2 = t1.clone();
    expect(t1.toString()).toBe('(3 5, 20)');
    expect(t2.toString()).toBe('(3 5, 20)');
    t1.center = new DPoint(4, 5);
    t1.r = 30;
    t2.center = new DPoint(6, 7);
    t2.r = 35;
    expect(t1.toString()).toBe('(4 5, 30)');
    expect(t2.toString()).toBe('(6 7, 35)');
  });

  describe('findPoints', () => {
    test('none', () => {
      expect(new DCircle(new DPoint(0, 0), 10).findPoints(new DCircle(new DPoint(30, 0), 10))).toEqual([]);
    });
    test('one', () => {
      expect(new DCircle(new DPoint(0, 0), 10)
        .findPoints(new DCircle(new DPoint(20, 0), 10))).toEqual([new DPoint(10, 0)]);
    });
    test('two withs same y', () => {
      expect(new DCircle(new DPoint(0, 4), 13)
        .findPoints(new DCircle(new DPoint(20, 4), 13)))
        .toEqual([new DPoint(10, -4.306623862918075), new DPoint(10, 12.306623862918075)]);
    });
    test('two with same x', () => {
      expect(new DCircle(new DPoint(3, 0), 13)
        .findPoints(new DCircle(new DPoint(3, 20), 13)))
        .toEqual([
          new DPoint(11.306623862918075, 10),
          new DPoint(-5.306623862918075, 10)
        ]);
    });
    test('two', () => {
      expect(new DCircle(new DPoint(0, 2), 13)
        .findPoints(new DCircle(new DPoint(20, 1), 13)))
        .toEqual([new DPoint(9.585939154181538, -6.781216916369241), new DPoint(10.414060845818462, 9.78121691636924)]);
    });
    test('all', () => {
      expect(new DCircle(new DPoint(0, 0), 11)
        .findPoints(new DCircle(new DPoint(0, 0), 11))).toBe(Infinity);
    });
  });

  describe('findPolygonInside', () => {
    test('1', () => {
      const t = new DCircle(new DPoint(20, 30), 7).findPolygonInside();
      expect(t.toString()).toBe('(27 30, 26.966293086705377 30.686119982306924,' +
        ' 26.86549696282261 31.3656322541129,' +
        ' 26.698582350125463 32.031992740781234,' +
        ' 26.467156727579006 32.678784026555626,' +
        ' 26.173448850438486 33.29977715778198,' +
        ' 25.820287286117818 33.888991631137216,' +
        ' 25.411073173539158 34.440752989145516,' +
        ' 24.949747468305834 34.94974746830583,' +
        ' 24.44075298914552 35.41107317353916,' +
        ' 23.888991631137216 35.82028728611782,' +
        ' 23.299777157781985 36.17344885043848,' +
        ' 22.67878402655563 36.46715672757901,' +
        ' 22.031992740781234 36.69858235012546,' +
        ' 21.3656322541129 36.86549696282261,' +
        ' 20.686119982306927 36.96629308670538,' +
        ' 20 37,' +
        ' 19.313880017693076 36.96629308670538,' +
        ' 18.634367745887104 36.86549696282261,' +
        ' 17.968007259218766 36.69858235012546,' +
        ' 17.32121597344437 36.46715672757901,' +
        ' 16.700222842218018 36.17344885043848,' +
        ' 16.111008368862787 35.82028728611782,' +
        ' 15.559247010854483 35.41107317353916,' +
        ' 15.050252531694168 34.94974746830583,' +
        ' 14.588926826460842 34.440752989145516,' +
        ' 14.179712713882182 33.888991631137216,' +
        ' 13.826551149561515 33.29977715778198,' +
        ' 13.532843272420994 32.67878402655563,' +
        ' 13.301417649874537 32.031992740781234,' +
        ' 13.134503037177387 31.3656322541129,' +
        ' 13.033706913294623 30.686119982306927,' +
        ' 13 30,' +
        ' 13.033706913294623 29.313880017693076,' +
        ' 13.134503037177387 28.6343677458871,' +
        ' 13.301417649874537 27.968007259218766,' +
        ' 13.532843272420992 27.32121597344437,' +
        ' 13.826551149561514 26.700222842218018,' +
        ' 14.179712713882182 26.111008368862787,' +
        ' 14.58892682646084 25.559247010854484,' +
        ' 15.050252531694166 25.05025253169417,' +
        ' 15.559247010854477 24.588926826460842,' +
        ' 16.111008368862784 24.179712713882182,' +
        ' 16.700222842218015 23.826551149561517,' +
        ' 17.321215973444367 23.532843272420994,' +
        ' 17.968007259218762 23.301417649874537,' +
        ' 18.6343677458871 23.13450303717739,' +
        ' 19.313880017693076 23.033706913294623,' +
        ' 20 23, 20.68611998230692 23.033706913294623,' +
        ' 21.3656322541129 23.13450303717739,' +
        ' 22.031992740781234 23.301417649874537,' +
        ' 22.67878402655563 23.532843272420994,' +
        ' 23.299777157781982 23.826551149561514,' +
        ' 23.888991631137213 24.179712713882182,' +
        ' 24.44075298914552 24.588926826460842,' +
        ' 24.94974746830583 25.050252531694166,' +
        ' 25.411073173539155 25.559247010854477,' +
        ' 25.820287286117818 26.111008368862784,' +
        ' 26.173448850438483 26.700222842218015,' +
        ' 26.467156727579006 27.321215973444367,' +
        ' 26.698582350125463 27.968007259218762,' +
        ' 26.86549696282261 28.634367745887097,' +
        ' 26.966293086705377 29.313880017693076,' +
        ' 27 30)');
    });
  });

  describe('findPolygonInside', () => {
    test('1', () => {
      const t = new DCircle(new DPoint(0, 0), 7000).findPolygonInsideOnSphere();
      expect(t.toString()).toBe('(0 0.06295242546071765,' +
        ' 0.006170419179593894 0.06264929220437483,' +
        ' 0.01228141370877854 0.06174281178474362,' +
        ' 0.018274131241122683 0.06024171413418703,' +
        ' 0.02409085852550802 0.058160455691395774,' +
        ' 0.029675577225357574 0.05551908017387036,' +
        ' 0.03497450341213348 0.05234302554071423,' +
        ' 0.039936605536944676 0.048662879005244124,' +
        ' 0.04451409589165863 0.044514082457291465,' +
        ' 0.04866289082652985 0.039936591132665476,' +
        ' 0.05234303529255274 0.03497448881747408,' +
        ' 0.05551908762059214 0.02967556329351867,' +
        ' 0.058160460832504965 0.024090846113769826,' +
        ' 0.06024171719823271 0.01827412114031516,' +
        ' 0.06174281320317241 0.012281406577853489,' +
        ' 0.06264929256767861 0.006170415490907766,' +
        ' 0.06295242546071765 3.8547235413802335e-18,' +
        ' 0.06264929256767862 -0.006170415490907758,' +
        ' 0.06174281320317241 -0.01228140657785348,' +
        ' 0.06024171719823271 -0.01827412114031515,' +
        ' 0.058160460832504965 -0.024090846113769823,' +
        ' 0.05551908762059215 -0.029675563293518666,' +
        ' 0.05234303529255275 -0.03497448881747405,' +
        ' 0.04866289082652987 -0.03993659113266546,' +
        ' 0.04451409589165864 -0.04451408245729146,' +
        ' 0.039936605536944676 -0.048662879005244124,' +
        ' 0.03497450341213348 -0.05234302554071424,' +
        ' 0.029675577225357585 -0.055519080173870354,' +
        ' 0.024090858525508022 -0.058160455691395774,' +
        ' 0.018274131241122687 -0.06024171413418703,' +
        ' 0.012281413708778563 -0.06174281178474362,' +
        ' 0.006170419179593908 -0.06264929220437483,' +
        ' 7.709451736189816e-18 -0.06295242546071765,' +
        ' -0.0061704191795938935 -0.06264929220437483,' +
        ' -0.012281413708778548 -0.06174281178474362,' +
        ' -0.018274131241122673 -0.06024171413418703,' +
        ' -0.02409085852550801 -0.058160455691395774,' +
        ' -0.029675577225357574 -0.05551908017387036,' +
        ' -0.03497450341213347 -0.052343025540714246,' +
        ' -0.03993660553694466 -0.04866287900524413,' +
        ' -0.04451409589165863 -0.04451408245729147,' +
        ' -0.04866289082652984 -0.039936591132665504,' +
        ' -0.05234303529255274 -0.034974488817474066,' +
        ' -0.05551908762059214 -0.029675563293518684,' +
        ' -0.05816046083250495 -0.024090846113769857,' +
        ' -0.06024171719823271 -0.018274121140315163,' +
        ' -0.061742813203172396 -0.01228140657785351,' +
        ' -0.06264929256767862 -0.006170415490907745,' +
        ' -0.06295242546071765 -1.15641706241407e-17,' +
        ' -0.06264929256767862 0.006170415490907723,' +
        ' -0.06174281320317241 0.012281406577853487,' +
        ' -0.06024171719823271 0.018274121140315142,' +
        ' -0.05816046083250495 0.024090846113769836,' +
        ' -0.05551908762059215 0.02967556329351866,' +
        ' -0.052343035292552756 0.034974488817474045,' +
        ' -0.04866289082652985 0.03993659113266548,' +
        ' -0.044514095891658646 0.04451408245729145,' +
        ' -0.039936605536944704 0.04866287900524409,' +
        ' -0.03497450341213348 0.05234302554071423,' +
        ' -0.029675577225357592 0.05551908017387035,' +
        ' -0.024090858525508053 0.05816045569139576,' +
        ' -0.018274131241122697 0.06024171413418703,' +
        ' -0.012281413708778572 0.061742811784743605,' +
        ' -0.006170419179593888 0.06264929220437483)');
    });
    test('2', () => {
      const t = new DCircle(new DPoint(45, 45), 7000).findPolygonInsideOnSphere();
      expect(t.toString()).toBe('(45 45.062952425460715,' +
        ' 45.008735842547715 45.0626489595817,' +
        ' 45.01738727837075 45.0617414940975,' +
        ' 45.025870724273304 45.060238796856964,' +
        ' 45.03410423577305 45.05815538586634,' +
        ' 45.04200830569377 45.05551138768786,' +
        ' 45.049506638109946 45.05233234120892,' +
        ' 45.05652688987085 45.04864894876476,' +
        ' 45.063001372302146 45.04449677712509,' +
        ' 45.06886770613557 45.03991591135352,' +
        ' 45.074069423243564 45.034950565013226,' +
        ' 45.07855650934822 45.0296486506182,' +
        ' 45.08228588252405 45.0240613146112,' +
        ' 45.085221803011834 45.01824244148591,' +
        ' 45.087336210596355 45.01224813195573,' +
        ' 45.088608986565006 45.00613616030609,' +
        ' 45.08902813804589 44.99996541624609,' +
        ' 45.088589903314904 44.993795336701645,' +
        ' 45.08729877745091 44.98768533306186,' +
        ' 45.08516745849869 44.981694219406855,' +
        ' 45.082216715063055 44.975879647207115,' +
        ' 45.07847517699604 44.97029755189482,' +
        ' 45.07397905154757 44.965001616567584,' +
        ' 45.06877176802222 44.96004275789673,' +
        ' 45.06290355461549 44.95546863907926,' +
        ' 45.05643095168973 44.951323214396865,' +
        ' 45.04941626628871 44.94764630963119,' +
        ' 45.041926973177944 44.94447324223359,' +
        ' 45.03403506813493 44.941834484765785,' +
        ' 45.02581637959651 44.9397553747167,' +
        ' 45.01734984510005 44.938255873364874,' +
        ' 45.008716759229834 44.93735037589957,' +
        ' 45 44.937047574539285,' +
        ' 44.991283240770166 44.93735037589957,' +
        ' 44.98265015489995 44.938255873364874,' +
        ' 44.97418362040348 44.9397553747167,' +
        ' 44.96596493186507 44.941834484765785,' +
        ' 44.958073026822056 44.94447324223359,' +
        ' 44.95058373371129 44.94764630963119,' +
        ' 44.94356904831027 44.951323214396865,' +
        ' 44.93709644538451 44.95546863907926,' +
        ' 44.93122823197778 44.96004275789673,' +
        ' 44.92602094845243 44.965001616567584,' +
        ' 44.92152482300396 44.97029755189482,' +
        ' 44.917783284936945 44.975879647207115,' +
        ' 44.91483254150131 44.981694219406855,' +
        ' 44.91270122254909 44.987685333061854,' +
        ' 44.911410096685096 44.993795336701645,' +
        ' 44.91097186195411 44.99996541624609,' +
        ' 44.911391013434994 45.00613616030609,' +
        ' 44.912663789403645 45.01224813195573,' +
        ' 44.914778196988166 45.01824244148591,' +
        ' 44.91771411747595 45.0240613146112,' +
        ' 44.92144349065178 45.0296486506182,' +
        ' 44.925930576756436 45.034950565013226,' +
        ' 44.93113229386443 45.03991591135352,' +
        ' 44.936998627697854 45.04449677712509,' +
        ' 44.94347311012915 45.04864894876476,' +
        ' 44.950493361890054 45.05233234120892,' +
        ' 44.95799169430623 45.05551138768786,' +
        ' 44.96589576422694 45.05815538586634,' +
        ' 44.97412927572669 45.060238796856964,' +
        ' 44.98261272162925 45.0617414940975,' +
        ' 44.991264157452285 45.0626489595817)');
    });
  });
});
